"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _awsSdk = require("aws-sdk");

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _config = require("./config");

var config = _interopRequireWildcard(_config);

_awsSdk2["default"].config.update({
	accessKeyId: config.AWS_ACCESS_KEY_ID,
	secretAccessKey: config.AWS_SECRET_ACCESS_KEY,
	region: config.AWS_REGION
});

var init_function = function init_function() {
	return new Promise(function (resolve, reject) {
		var lambda = new _awsSdk2["default"].Lambda();
		var params = {
			FunctionName: config.FUNCTION_NAME };
		/* required */
		lambda.getFunction(params, function (err, data) {
			if (err && err.code == "ResourceNotFoundException") {
				var params = {
					Code: { /* required */
						S3Bucket: config.BACKET,
						S3Key: config.FILE_KEY
					},
					FunctionName: config.FUNCTION_NAME, /* required */
					Handler: config.HANDLER, /* required */
					Role: config.ROLE_ARN, /* required */
					Runtime: 'nodejs', /* required */
					Description: config.DESCRIPTION,
					MemorySize: config.MEMORYSIZE,
					Timeout: config.TIMEOUT
				};

				lambda.createFunction(params, function (err, data) {
					if (err) {
						console.error("FAIL - create lambda function");
						reject(err);
					} else {
						console.log("SUCCESS - create lambda function");
						resolve(data);
					}
				});
			} else {
				var params = {
					FunctionName: config.FUNCTION_NAME, /* required */
					Handler: config.HANDLER, /* required */
					Role: config.ROLE_ARN, /* required */
					Description: config.DESCRIPTION,
					MemorySize: config.MEMORYSIZE,
					Timeout: config.TIMEOUT
				};

				lambda.updateFunctionConfiguration(params, function (err, data) {
					if (err) {
						console.error("FAILED - update lambda function");
						reject(err);
					} else {
						console.log("SUCCESS - update lambda function");
						resolve(data);
					}
				});
			}
		});
	});
};

var update_code = function update_code() {
	return new Promise(function (resolve, reject) {

		var lambda = new _awsSdk2["default"].Lambda();
		var params = {
			FunctionName: config.FUNCTION_NAME, /* required */
			S3Bucket: config.BACKET,
			S3Key: config.FILE_KEY
		};
		lambda.updateFunctionCode(params, function (err, data) {
			if (err) {
				console.error("FAILED - update lambda function code"); // an error occurred
				reject(err);
			} else {
				console.log("SUCCESS - update lambda function code"); // an error occurred
				resolve(data);
			}
		});
	});
};

exports.init_function = init_function;
exports.update_code = update_code;
//# sourceMappingURL=data:application/json;base64,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b0JBQUksTUFBTSxFQUFFLENBQUE7QUFDN0IsTUFBSSxNQUFNLEdBQUc7QUFDWixlQUFZLEVBQUUsTUFBTSxDQUFDLGFBQWE7QUFDbEMsV0FBUSxFQUFFLE1BQU0sQ0FBQyxNQUFNO0FBQ3ZCLFFBQUssRUFBRSxNQUFNLENBQUMsUUFBUTtHQUN0QixDQUFDO0FBQ0YsUUFBTSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxVQUFTLEdBQUcsRUFBRSxJQUFJLEVBQUU7QUFDckQsT0FBSSxHQUFHLEVBQUU7QUFDUixXQUFPLENBQUMsS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7QUFDdEQsVUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ1gsTUFDSTtBQUNKLFdBQU8sQ0FBQyxHQUFHLENBQUMsdUNBQXVDLENBQUMsQ0FBQztBQUNyRCxXQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDYjtHQUNELENBQUMsQ0FBQTtFQUNGLENBQUMsQ0FBQTtDQUNGLENBQUE7O1FBRU8sYUFBYSxHQUFiLGFBQWE7UUFBRSxXQUFXLEdBQVgsV0FBVyIsImZpbGUiOiJsYW1iZGEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXdzIGZyb20gXCJhd3Mtc2RrXCJcbmltcG9ydCAqIGFzIGNvbmZpZyBmcm9tIFwiLi9jb25maWdcIlxuXG5Bd3MuY29uZmlnLnVwZGF0ZSh7XG5cdGFjY2Vzc0tleUlkOiBjb25maWcuQVdTX0FDQ0VTU19LRVlfSUQsXG5cdHNlY3JldEFjY2Vzc0tleTogY29uZmlnLkFXU19TRUNSRVRfQUNDRVNTX0tFWSxcblx0cmVnaW9uOiBjb25maWcuQVdTX1JFR0lPTlxufSlcblxudmFyIGluaXRfZnVuY3Rpb249ZnVuY3Rpb24oKXtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHR2YXIgbGFtYmRhID0gbmV3IEF3cy5MYW1iZGEoKVxuXHRcdHZhciBwYXJhbXMgPSB7XG5cdFx0XHRGdW5jdGlvbk5hbWU6IGNvbmZpZy5GVU5DVElPTl9OQU1FLCAvKiByZXF1aXJlZCAqL1xuXHRcdH07XG5cdFx0bGFtYmRhLmdldEZ1bmN0aW9uKHBhcmFtcywgZnVuY3Rpb24oZXJyLCBkYXRhKSB7XG5cdFx0XHRpZihlcnIgJiYgZXJyLmNvZGU9PVwiUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblwiKXtcblx0XHRcdFx0dmFyIHBhcmFtcyA9IHtcblx0XHRcdFx0XHRDb2RlOiB7IC8qIHJlcXVpcmVkICovXG5cdFx0XHRcdFx0XHRTM0J1Y2tldDogY29uZmlnLkJBQ0tFVCxcblx0XHRcdFx0XHRcdFMzS2V5OiBjb25maWcuRklMRV9LRVksXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRGdW5jdGlvbk5hbWU6IGNvbmZpZy5GVU5DVElPTl9OQU1FLCAvKiByZXF1aXJlZCAqL1xuXHRcdFx0XHRcdEhhbmRsZXI6IGNvbmZpZy5IQU5ETEVSLCAvKiByZXF1aXJlZCAqL1xuXHRcdFx0XHRcdFJvbGU6IGNvbmZpZy5ST0xFX0FSTiwgLyogcmVxdWlyZWQgKi9cblx0XHRcdFx0XHRSdW50aW1lOiAnbm9kZWpzJywgLyogcmVxdWlyZWQgKi9cblx0XHRcdFx0XHREZXNjcmlwdGlvbjogY29uZmlnLkRFU0NSSVBUSU9OLFxuXHRcdFx0XHRcdE1lbW9yeVNpemU6IGNvbmZpZy5NRU1PUllTSVpFLFxuXHRcdFx0XHRcdFRpbWVvdXQ6IGNvbmZpZy5USU1FT1VUIFxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGxhbWJkYS5jcmVhdGVGdW5jdGlvbihwYXJhbXMsIGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuXHRcdFx0XHRcdGlmKGVycikge1xuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkZBSUwgLSBjcmVhdGUgbGFtYmRhIGZ1bmN0aW9uXCIpXG5cdFx0XHRcdFx0XHRyZWplY3QoZXJyKVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIlNVQ0NFU1MgLSBjcmVhdGUgbGFtYmRhIGZ1bmN0aW9uXCIpXG5cdFx0XHRcdFx0XHRyZXNvbHZlKGRhdGEpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0fWVsc2V7XG5cdFx0XHRcdHZhciBwYXJhbXMgPSB7XG5cdFx0XHRcdFx0RnVuY3Rpb25OYW1lOiBjb25maWcuRlVOQ1RJT05fTkFNRSwgLyogcmVxdWlyZWQgKi9cblx0XHRcdFx0XHRIYW5kbGVyOiBjb25maWcuSEFORExFUiwgLyogcmVxdWlyZWQgKi9cblx0XHRcdFx0XHRSb2xlOiBjb25maWcuUk9MRV9BUk4sIC8qIHJlcXVpcmVkICovXG5cdFx0XHRcdFx0RGVzY3JpcHRpb246IGNvbmZpZy5ERVNDUklQVElPTixcblx0XHRcdFx0XHRNZW1vcnlTaXplOiBjb25maWcuTUVNT1JZU0laRSxcblx0XHRcdFx0XHRUaW1lb3V0OiBjb25maWcuVElNRU9VVCBcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRsYW1iZGEudXBkYXRlRnVuY3Rpb25Db25maWd1cmF0aW9uKHBhcmFtcywgZnVuY3Rpb24oZXJyLCBkYXRhKSB7XG5cdFx0XHRcdFx0aWYoZXJyKSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiRkFJTEVEIC0gdXBkYXRlIGxhbWJkYSBmdW5jdGlvblwiKVxuXHRcdFx0XHRcdFx0cmVqZWN0KGVycilcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coXCJTVUNDRVNTIC0gdXBkYXRlIGxhbWJkYSBmdW5jdGlvblwiKVxuXHRcdFx0XHRcdFx0cmVzb2x2ZShkYXRhKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdH1cblx0XHR9KVxuXHR9KVxufVxuXG52YXIgdXBkYXRlX2NvZGUgPSBmdW5jdGlvbigpe1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG5cdFx0dmFyIGxhbWJkYSA9IG5ldyBBd3MuTGFtYmRhKClcblx0XHR2YXIgcGFyYW1zID0ge1xuXHRcdFx0RnVuY3Rpb25OYW1lOiBjb25maWcuRlVOQ1RJT05fTkFNRSwgLyogcmVxdWlyZWQgKi9cblx0XHRcdFMzQnVja2V0OiBjb25maWcuQkFDS0VULFxuXHRcdFx0UzNLZXk6IGNvbmZpZy5GSUxFX0tFWSxcblx0XHR9O1xuXHRcdGxhbWJkYS51cGRhdGVGdW5jdGlvbkNvZGUocGFyYW1zLCBmdW5jdGlvbihlcnIsIGRhdGEpIHtcblx0XHRcdGlmIChlcnIpIHtcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkZBSUxFRCAtIHVwZGF0ZSBsYW1iZGEgZnVuY3Rpb24gY29kZVwiKTsgLy8gYW4gZXJyb3Igb2NjdXJyZWRcblx0XHRcdFx0cmVqZWN0KGVycilcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcIlNVQ0NFU1MgLSB1cGRhdGUgbGFtYmRhIGZ1bmN0aW9uIGNvZGVcIik7IC8vIGFuIGVycm9yIG9jY3VycmVkXG5cdFx0XHRcdHJlc29sdmUoZGF0YSlcblx0XHRcdH1cblx0XHR9KVxuXHR9KVxufVxuXG5leHBvcnQge2luaXRfZnVuY3Rpb24sIHVwZGF0ZV9jb2RlfVxuIl19